package designpattern.structural.adapter;
/**
 * <pre>
 * 어댑터 패턴은 직접 연결할 수 없는 두 개의 호환되지 않는 인터페이스 간의 커넥터 역할을 합니다. 
 * 기존 소스 코드를 수정하지 않고 기존 클래스가 다른 클래스와 함께 작동하도록 만드는 데 자주 사용됩니다.
 * 이 패턴의 주요 목표는 기존 인터페이스를 클라이언트가 기대하는 다른 인터페이스로 변환하는 것입니다.
 * 이 패턴의 구조는 Decorator와 유사합니다. 그러나 데코레이터는 일반적으로 확장을 염두에 두고 구현됩니다. 
 * 어댑터는 일반적으로 호환되지 않는 인터페이스를 연결하기 위해 초기 코드가 작성된 후에 구현됩니다. 
 * 
 * 타사 라이브러리를 사용하는 대부분의 응용 프로그램은 어댑터를 응용 프로그램과 
 * 타사 라이브러리 사이의 중간 계층으로 사용하여 라이브러리에서 응용 프로그램을 분리합니다. 
 * 다른 라이브러리를 사용해야 하는 경우 애플리케이션 코드를 변경하지 않고 새 라이브러리에 대한 어댑터만 필요합니다.
 * 이 패턴을 구현하는 두 가지 주요 방법이 있으므로 검토해 보겠습니다.
 * 
 * Target Interface : 클라이언트가 사용하기 원하는 인터페이스 클래스입니다.
 * Adapter class: 이 클래스는 원하는 대상 인터페이스를 구현하고 Adaptee 클래스에서 사용 가능한 특정 요청을 수정하는 래퍼 클래스입니다.
 * Adaptee class : 기존 기능을 재사용하고 원하는 용도로 수정하기 위해 어댑터 클래스에서 사용하는 클래스입니다.
 * Client: 이 클래스는 어댑터 클래스와 상호 작용합니다.
 * </pre>
 *
 */
public class 어댑터 {

}
