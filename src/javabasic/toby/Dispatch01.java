package javabasic.toby;

public class Dispatch01 {
	/**
	 * 의존관계
	 * 클라이언트가 대상 참조를 가지고 사용하는 것
	 * 클라이언트가 기준
	 * 
	 * 컴포넌트란 이를 만든 개발자의 손이 미치지 않는 곳에서도, 아무 변경 없이, 필요에 따라 확장해서 사용될 수 있는 소프트웨어 덩이
	 * 
	 * 클래스/오브객트 분류 디자인 패턴에서 대부분은 객체 오브객트 패턴에 속한다.
	 * 오브젝트 패턴은 런타임시에 바뀔 수 있는 상속 관계보다 더 동적인 오브젝트 의존 관계를 다룬다.(DI와도 연결되어 있다)
	 * 
	 * 스프링에서 Dependency
	 * 컴파일 타임이 아니라 런타임시에 결정/구성되는 오브젝트 의존 관계
	 * 1. 구현 대신 인터페이스 사용
	 * 	클래스(구현) 의존관계 제거
	 * 	클래스에 대한 의존성은 생성 패턴처럼 3자에게 위임
	 * 
	 * 2. 오브젝트 합성(composition)사용
	 * 	재사용성을 확보하기 위한 방법의 한 가지 (상속 대안)
	 * 	인터페이스 사용이 전제(블랙 박스 재사용)
	 * 	새롭고 복잡한 기능을 얻기 위해서 오브젝트를 조합/합성
	 * 	런타임시에 다른 오브젝트에 대한 레퍼런스를 획득
	 * 	각 클래스가 캡슐화되고 자신의 역할에 충실하게 도와줌
	 */
	public static void main(String[] args) {
		
	}
}
